// main_test.go

package main
    
import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/spf13/viper"
)

var a App

func init() {
	viper.SetConfigFile(`config.json`)
	err := viper.ReadInConfig()

	if err != nil {
		panic(err)
	}

}
func TestMain(m *testing.M) {

	dbHost := viper.GetString(`database.host`)
	dbPort := viper.GetString(`database.port`)
	dbUser := viper.GetString(`database.user`)
	dbPass := viper.GetString(`database.pass`)
	dbName := viper.GetString(`database.name`)

	a = App{}
	a.Initialize(dbUser, dbPass, dbHost, dbPort, dbName)

	ensureTableExists()

	code := m.Run()

	clearTable()

	os.Exit(code)
}

func ensureTableExists() {
	if _, err := a.DB.Exec(tableCreationQuery); err != nil {
		log.Fatal(err)
	}
}

func clearTable() {
	a.DB.Exec("DELETE FROM models2")
	a.DB.Exec("ALTER TABLE models2 AUTO_INCREMENT = 1")
}

const tableCreationQuery = `CREATE TABLE models2 ( models2_id int(11) AUTO_INCREMENT PRIMARY KEY NOT NULL, 
name varchar(255) NOT NULL, 
height varchar(255) NOT NULL, 
weight varchar(255) NOT NULL, 
is_disabled varchar(1) NOT NULL DEFAULT '0') 
ENGINE=InnoDB DEFAULT CHARSET=utf8; `

func TestEmptyTable(t *testing.T) {
	clearTable()

	req, _ := http.NewRequest("GET", "/models2", nil)
	response := executeRequest(req)

	checkResponseCode(t, http.StatusOK, response.Code)

	if body := response.Body.String(); body != "[]" {
		t.Errorf("Expected an empty array. Got %s", body)
	}
}

func executeRequest(req *http.Request) *httptest.ResponseRecorder {
	rr := httptest.NewRecorder()
	a.Router.ServeHTTP(rr, req)

	return rr
}

func checkResponseCode(t *testing.T, expected, actual int) {
	if expected != actual {
		t.Errorf("Expected response code %d. Got %d\n", expected, actual)
	}
}

func TestGetNonExistentModel(t *testing.T) {
	clearTable()

	req, _ := http.NewRequest("GET", "/models/45", nil)
	response := executeRequest(req)

	checkResponseCode(t, http.StatusNotFound, response.Code)

	var m map[string]string
	json.Unmarshal(response.Body.Bytes(), &m)
	if m["error"] != "Model not found" {
		t.Errorf("Expected the 'error' key of the response to be set to 'Model not found'. Got '%s'", m["error"])
	}
}

func TestCreateModel(t *testing.T) {
	clearTable()
	//need to fix with real data
	payload := []byte(`{"name" : "TF name", 
"height" : "TF height", 
"weight" : "TF weight" 
}`)

	req, _ := http.NewRequest("POST", "/models", bytes.NewBuffer(payload))
	response := executeRequest(req)

	checkResponseCode(t, http.StatusCreated, response.Code)

	var m map[string]interface{}
	json.Unmarshal(response.Body.Bytes(), &m)

	//need to fix with database column
if m["name"] != "TF name" { 
t.Errorf("Expected value: TF name. Got '%v'", m["name"]) 

} 
if m["height"] != "TF height" { 
t.Errorf("Expected value: TF height. Got '%v'", m["height"]) 

} 
if m["weight"] != "TF weight" { 
t.Errorf("Expected value: TF weight. Got '%v'", m["weight"]) 

} 


	// the id is compared to 1.0 because JSON unmarshaling converts numbers to
	// floats, when the target is a map[string]interface{}

	if m["models2_id"] != 1.0 {
		t.Errorf("Expected models2 ID to be '1'. Got '%v'", m["models2_id"])
	}

	//end of fixing
}

func addModels2(count int) {
	if count < 1 {
		count = 1
	}

	for i := 0; i < count; i++ {
		//need to fix with the right column
		statement := fmt.Sprintf("INSERT INTO models2(name,height,weight) VALUES ('%s','%s', '%s')","s","s","s")
//end of fix
		a.DB.Exec(statement)
	}
}

func TestGetModel(t *testing.T) {
	clearTable()
	addModels2(1)

	req, _ := http.NewRequest("GET", "/models/1", nil)
	response := executeRequest(req)

	checkResponseCode(t, http.StatusOK, response.Code)
}

func TestUpdateModel(t *testing.T) {
	clearTable()
	addModels2(1)

	req, _ := http.NewRequest("GET", "/models/1", nil)
	response := executeRequest(req)
	var originalModel map[string]interface{}
	json.Unmarshal(response.Body.Bytes(), &originalModel)
	//need to fix with the right column
	
	payload := []byte(`{"name":"name",
"height":"height",
"weight":"weight"

	}`)

	req, _ = http.NewRequest("PUT", "/models/1", bytes.NewBuffer(payload))
	response = executeRequest(req)

	checkResponseCode(t, http.StatusOK, response.Code)

	var m map[string]interface{}
	json.Unmarshal(response.Body.Bytes(), &m)

	if m["models2_id"] != originalModels["models2_id"] {
		t.Errorf("Expected the id to remain the same (%v). Got %v", originalModels["models2_id"], m["models2_id"])
	}

}

func TestDeleteModels(t *testing.T) {
	clearTable()
	addModels2(1)

	req, _ := http.NewRequest("GET", "/models/1", nil)
	response := executeRequest(req)
	checkResponseCode(t, http.StatusOK, response.Code)

	req, _ = http.NewRequest("DELETE", "/models/1", nil)
	response = executeRequest(req)

	checkResponseCode(t, http.StatusOK, response.Code)

	req, _ = http.NewRequest("GET", "/models/1", nil)
	response = executeRequest(req)
	checkResponseCode(t, http.StatusNotFound, response.Code)
}
